c
q
c
beat_expression[:note]
arg_default(:note)
c
arg_default(:note)
beat_expression[:note]
beat_expression
c
q
EvolvableSound::Synth.randomize_args(args: arg_keys)
arg_keys
beat_expression
beat_expression[:note]
c
object_mutations_count
mutant_genes.count
c
q
objects.count * evolvable_genes_count * 0.2
objects.count * evolvable_genes_count * 0.1
objects.count * evolvable_genes_count * 0.2
objects.count * evolvable_genes_count * 0.1
objects.count * evolvable_genes_count * 0.3
objects.count * evolvable_genes_count * 0.2
objects.count * evolvable_genes_count * 0.3
objects.count * evolvable_genes_count * 3
objects.count * evolvable_genes_count * @rate
rate
mutant_genes.count
mutant_genes
q
100.times.map { rand(genes.length) }
rand(genes.length)
genes.length
gens.length
genes
genes.sample(genes.count - evolvable_genes_count)
genes.count - evolvable_genes_count
genes.count
genes
q
mutant_genes.count
q
c
@genes.count
c
@genes.count
c
@genes.count
c
@genes.count
c
@genes.count
q
c
q
    SONIC_PI.run("run_file '#{FileUtils.pwd}/#{sound_file_name}'")
FileUtils.pwd
FileUtils
FileSystem
4
c
SonicPi.new.run('play [50, 55, 60]')
c
SonicPi.new.run('play [50, 55, 60]')
SONIC_PI.pSonicPi.new.run('play [50, 55, 60]')
SONIC_PI
c
system("mkdir ./sounds")
File.write(sound_file_name, sonic_pi_code)
system("ls")
c
classes
q
{ thing: 1 }.each_value { |n| puts n }
{ thing: 1 }.each_value
    end.compact
      synth.class if synth.is_a?(SonicPiSynth) && synth.user_facing?
    SonicPi::Synths::SynthInfo.synth_infos.values.map do |synth|
SonicPi::Synths::SynthInfo.synth_infos.values.first.is_a? SonicPi::Synths::SonicPiSynth
SonicPi::Synths::SynthInfo.synth_infos.values.all? { |o| o.is_a?(SonicPi::Synths::SonicPiSynth) }
SonicPi::Synths::SynthInfo.synth_infos.values.all? { |o| o.is_a?(SonicPiSynth) }
SonicPi::Synths::SynthInfo.synth_infos.values.first.user_facing?
SonicPi::Synths::SynthInfo.synth_infos.values.first.class
SonicPi::Synths::SynthInfo.synth_infos.values.first
SonicPi::Synths::SynthInfo.synth_infos.values
SonicPi::Synths::DullBell.new.user_facing?
SonicPi::Synths::DullBell.user_facing?
SonicPi::Synths::SynthInfo.synth_infos.first
SonicPi::Synths::SynthInfo.synth_infos
q
SonicPi::Synths::SynthInfo.synth_infos
SonicPi::Synths::SynthInfo.sythn_infos
SonicPi::Synths::SynthInfo.syth_infos
SonicPi::Synths::SynthInfo
SonicPi::Synths.syth_infos
q
SonicPi::Synths::BaseInfo.syth_infos
SonicPi::Synths::BaseInfo.all_synths.count
SonicPi::Synths::BaseInfo.all_synths
SonicPi::Synths.all_synths
SonicPi::Syths.all_synths
SonicPi::Sythhs.all_synths
SonicPi.all_synths
SonicPi::Synths::BasicMixer.new.user_facing?
SonicPi::Synths::BaseMixer.new.user_facing?
classes.count
classes.all? { |c| c.method_defined?(:synth_name) }
classes
q
beat_expression
self.synth_name
self.class
arg_defaults
SonicPi::Synths::ModSine.new.arg_defaults
SonicPi::Synths::ModSine.new
arg_defaults
arg_default(:note)
arg_default
arg_default(:note)
c
          beat_expression = @expressions[beat].dup
@expressions[5]
@expressions[4]
@expressions[3]
@expressions[2]
@expressions[1]
@expressions
q
@expressions ||= initialize_expressions
initialize_expressions
@expressions
c
initialize_expressionsc
initialize_expressions
@expessions[3]
@expessions[4]
@expessions[3]
@expessions[beat]
q
EvolvableSound::Synth.randomize_args(args: arg_defaults.keys)
arg_defaults
initialize_expressions[:test]
initialize_expressions
true &&  EvolvableSound::Synth.randomize_args(args: arg_defaults)
 EvolvableSound::Synth.randomize_args(args: arg_defaults)
thing[:tesdtf]
thing[:testf]
thing[:test]
thing =         Hash.new { |hash, key| hash[key] = rand }
        Hash.new { |hash, key| hash[key] = rand }
@expressions[5]
@expressions[4]
@expressions[3]
@expressions[2]
@expressions[1]
@expressions
@expression[1]
beat
q
system("ls")
q
Synths
SonicPi::Synths::ModSine
Synths
SonicPi
eval(file)
load(file)
SonicPi
load(file)
file
q
file = Net::HTTP.get(uri)
require 'net/http'
file = Net::HTTP.get(uri)
uri = URI(uri)
uri = "https://raw.githubusercontent.com/mattruzicka/sonic-pi/master/app/server/ruby/lib/sonicpi/synths/synthinfo.rb"
uri "https://raw.githubusercontent.com/mattruzicka/sonic-pi/master/app/server/ruby/lib/sonicpi/synths/synthinfo.rb"
URI
require 'open-air'
open("https://raw.githubusercontent.com/mattruzicka/sonic-pi/master/app/server/ruby/lib/sonicpi/synths/synthinfo.rb")
load("https://raw.githubusercontent.com/mattruzicka/sonic-pi/master/app/server/ruby/lib/sonicpi/synths/synthinfo.rb")
